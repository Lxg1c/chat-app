/**
 * AuthService —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:
 * —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
 * –ù–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å HTTP (req/res).
 */


import {RoleModel, UserModel} from "../models";
import bcrypt from "bcryptjs";
import {
    generateAccessToken,
    generateRefreshToken,
    verifyRefreshToken,
    verifyAccessToken
} from "../utils/jwt.utils";
import {Types} from "mongoose";
import {getChannel} from "../../../../packages/rabbitmq/rabbitmq";


class AuthService {
    async registration(username: string, password: string, phone: string, _id: Types.ObjectId): Promise<any> {
        const candidate = await UserModel.findOne({ username });
        if (candidate) {
            return { message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" };
        }

        const salt = await bcrypt.genSalt(10);
        const hashPassword = await bcrypt.hash(password, salt);

        const role = await RoleModel.findOne({ value: "ADMIN" });
        if (!role) {
            return { message: "–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" };
        }

        const newUser = new UserModel({
            _id,
            username,
            password: hashPassword,
            roles: [role._id]
        });
        await newUser.save();

        // üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å
        const channel = await getChannel();
        const queue = "create_user_profile";

        const userData = {
            _id: _id.toString(),
            username,
            phone
        };

        await channel.assertQueue(queue, { durable: true });
        channel.sendToQueue(queue, Buffer.from(JSON.stringify(userData)), { persistent: true });

        return { message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!" };
    }


    async login(username: string, password: string) {
        const user = await UserModel.findOne({ username }).populate("roles");

        if (!user) {
            return { message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" };
        }

        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) {
            return { message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å" };
        }

        const roleValues = user.roles.map((role: any) => role.value);
        const accessToken = generateAccessToken(user._id.toString(), roleValues);
        const refreshToken = generateRefreshToken(user._id.toString());

        return {accessToken, refreshToken };
    }

    async refreshToken(refreshToken: string) {
        if (!refreshToken) {
            return { message: "Refresh —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" };
        }

        const payload = verifyRefreshToken(refreshToken);
        const user = await UserModel.findById(payload.id).populate("roles");

        if (!user) {
            return { message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" };
        }

        const roleValues = user.roles.map((role: any) => role.value);
        const newAccessToken = generateAccessToken(user._id.toString(), roleValues);

        return { accessToken: newAccessToken };
    }

    async getUser(accessToken: string) {
        const decoded = verifyAccessToken(accessToken);
        return UserModel.findById(decoded.id).select("_id, username");
    }
}

export const authService = new AuthService();